/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gerenciadordelicencas;

import Usuário.*;
import BancoDeDados.LogBean;
import BancoDeDados.LogDao;
import BancoDeDados.conexao;
import Usuário.*;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import gerenciadordelicencas.*;
import java.awt.EventQueue;
import java.awt.Toolkit;
import java.beans.Beans;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.RollbackException;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Jéssica Moraes
 */
public class ResumosAdmin extends JPanel {

    ResultSet rs;
    private static int cont;

    private DefaultTableModel DefaultTableModel;
    LogDao ld = new LogDao();
    LogBean lb;

    public void pegaInformacoesDosCampos() {
        lb = new LogBean();

        lb.setUserField(userField.getText());
        lb.setChamadoField(chamadoField.getText());
        lb.setDataField(dataField.getText());
        lb.setHorarioField(horarioField.getText());

    }

    private void InsereHorario() {
        dataField.setText(objDataHora.MostraData().toString()); //TextField1 recebe a data
        horarioField.setText(objDataHora.MostraHora().toString()); //TextField2 recebe a hora
    }

    private void LimparCampos() {
        userField.setText("");
        chamadoField.setText("");
    }

    public class DataHora {

        public String MostraData() {
            //pega a data do computador
            Date data = new Date();
            //cria o formatador
            SimpleDateFormat dataformatada = new SimpleDateFormat("dd/MM/yyyy");
            // cria a string para armazenar data
            String sData = dataformatada.format(data);
            //retorna o valor pedido
            return sData;
        }

        public String MostraHora() {
            //pega data para converter em horas
            Date data = new Date();
            //cria o formatador
            SimpleDateFormat horaformatada = new SimpleDateFormat("hh:mm:ss a");
            // cria a string
            String sHora = horaformatada.format(data);
            //retorna o valor pedido
            return sHora;
        }
    }
    DataHora objDataHora = new DataHora();

    public ResumosAdmin() {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(gerenciadordelicencas.ResumosAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        if (!Beans.isDesignTime()) {
            entityManager.getTransaction().begin();

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("bd?zeroDateTimeBehavior=convertToNullPU").createEntityManager();
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT l FROM Licenças_1 l");
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        saveButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        dataField = new javax.swing.JTextField();
        horarioField = new javax.swing.JTextField();
        Resumos = new javax.swing.JDesktopPane();
        PanelCor = new javax.swing.JPanel();
        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        idLabel = new javax.swing.JLabel();
        fornecedorLabel = new javax.swing.JLabel();
        produtoLabel = new javax.swing.JLabel();
        sistemaLabel = new javax.swing.JLabel();
        linguagemLabel = new javax.swing.JLabel();
        contratadoLabel = new javax.swing.JLabel();
        utilizandoLabel = new javax.swing.JLabel();
        disponivelLabel = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        fornecedorField = new javax.swing.JTextField();
        produtoField = new javax.swing.JTextField();
        sistemaField = new javax.swing.JTextField();
        linguagemField = new javax.swing.JTextField();
        contratadoField = new javax.swing.JTextField();
        utilizandoField = new javax.swing.JTextField();
        disponivelField = new javax.swing.JTextField();
        lblPesquisar = new javax.swing.JLabel();
        cmbPesquisar = new javax.swing.JComboBox();
        txtPesquisar = new javax.swing.JTextField();
        btnChave = new javax.swing.JButton();
        RelatorioIndividual = new javax.swing.JButton();
        jBInclusao = new javax.swing.JButton();
        deleteButton1 = new javax.swing.JButton();
        newButton1 = new javax.swing.JButton();
        saveButton1 = new javax.swing.JButton();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        btnSalvar2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        chamadoLabel = new javax.swing.JLabel();
        userField = new javax.swing.JTextField();
        chamadoField = new javax.swing.JTextField();
        userLabel = new javax.swing.JLabel();
        btnFechar2 = new javax.swing.JButton();
        txtChave2 = new javax.swing.JTextField();
        chamadoLabel1 = new javax.swing.JLabel();

        FormListener formListener = new FormListener();

        saveButton.setText("Save");
        saveButton.addActionListener(formListener);

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(formListener);

        newButton.setText("New");
        newButton.addActionListener(formListener);

        deleteButton.setText("Delete");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), deleteButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        deleteButton.addActionListener(formListener);

        dataField.setEditable(false);
        dataField.setBackground(new java.awt.Color(204, 204, 204));

        horarioField.setEditable(false);
        horarioField.setBackground(new java.awt.Color(204, 204, 204));

        PanelCor.setBackground(new java.awt.Color(255, 255, 255));

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${fornecedor}"));
        columnBinding.setColumnName("Fornecedor");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${produto}"));
        columnBinding.setColumnName("Produto");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${sistema}"));
        columnBinding.setColumnName("Sistema");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${linguagem}"));
        columnBinding.setColumnName("Linguagem");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${contratado}"));
        columnBinding.setColumnName("Contratado");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${utilizando}"));
        columnBinding.setColumnName("Utilizando");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${disponivel}"));
        columnBinding.setColumnName("Disponivel");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        masterTable.addMouseListener(formListener);
        masterScrollPane.setViewportView(masterTable);

        idLabel.setText("Id:");

        fornecedorLabel.setText("Fornecedor:");

        produtoLabel.setText("Produto:");

        sistemaLabel.setText("Sistema:");

        linguagemLabel.setText("Linguagem:");

        contratadoLabel.setText("Contratado:");

        utilizandoLabel.setText("Utilizando:");

        disponivelLabel.setText("Disponivel:");

        idField.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.id}"), idField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), idField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.fornecedor}"), fornecedorField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), fornecedorField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        fornecedorField.addActionListener(formListener);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.produto}"), produtoField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), produtoField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.sistema}"), sistemaField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), sistemaField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.linguagem}"), linguagemField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), linguagemField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.contratado}"), contratadoField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), contratadoField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.utilizando}"), utilizandoField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), utilizandoField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        disponivelField.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.disponivel}"), disponivelField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), disponivelField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        lblPesquisar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPesquisar.setText("Pesquisar por:");

        cmbPesquisar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fornecedor", "Produto" }));

        txtPesquisar.addKeyListener(formListener);

        btnChave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/key-16.png"))); // NOI18N
        btnChave.setText("Chave do produto");
        btnChave.addActionListener(formListener);

        RelatorioIndividual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/report-3-16.png"))); // NOI18N
        RelatorioIndividual.setText("Relatório Individual");
        RelatorioIndividual.addActionListener(formListener);

        jBInclusao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Novo.png"))); // NOI18N
        jBInclusao.setText("Incluir Licença");
        jBInclusao.addActionListener(formListener);

        deleteButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Apagar.png"))); // NOI18N
        deleteButton1.setText("Apagar");
        deleteButton1.addActionListener(formListener);

        newButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Novo.png"))); // NOI18N
        newButton1.setText("Novo");
        newButton1.addActionListener(formListener);

        saveButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Salvar.png"))); // NOI18N
        saveButton1.setText("Salvar");
        saveButton1.addActionListener(formListener);

        javax.swing.GroupLayout PanelCorLayout = new javax.swing.GroupLayout(PanelCor);
        PanelCor.setLayout(PanelCorLayout);
        PanelCorLayout.setHorizontalGroup(
            PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelCorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelCorLayout.createSequentialGroup()
                        .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idLabel)
                            .addComponent(fornecedorLabel)
                            .addComponent(produtoLabel)
                            .addComponent(sistemaLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(produtoField, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                            .addComponent(fornecedorField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sistemaField, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(linguagemLabel)
                            .addComponent(utilizandoLabel)
                            .addComponent(disponivelLabel)
                            .addComponent(contratadoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(utilizandoField, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                            .addComponent(contratadoField)
                            .addComponent(linguagemField)
                            .addComponent(disponivelField, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(PanelCorLayout.createSequentialGroup()
                        .addComponent(lblPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(PanelCorLayout.createSequentialGroup()
                        .addComponent(btnChave, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(RelatorioIndividual, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelCorLayout.createSequentialGroup()
                        .addComponent(jBInclusao, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(newButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton1)
                        .addGap(3, 3, 3)
                        .addComponent(saveButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelCorLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(masterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        PanelCorLayout.setVerticalGroup(
            PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelCorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPesquisar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbPesquisar)
                    .addComponent(txtPesquisar))
                .addGap(192, 192, 192)
                .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelCorLayout.createSequentialGroup()
                        .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idLabel)
                            .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fornecedorLabel)
                            .addComponent(fornecedorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(produtoLabel)
                            .addComponent(produtoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sistemaLabel)
                            .addComponent(sistemaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(PanelCorLayout.createSequentialGroup()
                        .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(linguagemLabel)
                            .addComponent(linguagemField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(contratadoLabel)
                            .addComponent(contratadoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(utilizandoLabel)
                            .addComponent(utilizandoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(disponivelLabel)
                            .addComponent(disponivelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(saveButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(newButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jBInclusao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnChave)
                    .addComponent(RelatorioIndividual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(7, 7, 7))
            .addGroup(PanelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelCorLayout.createSequentialGroup()
                    .addGap(52, 52, 52)
                    .addComponent(masterScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(231, Short.MAX_VALUE)))
        );

        jInternalFrame2.setTitle("Consulta de Chave");
        jInternalFrame2.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Usuário/iconframe.png"))); // NOI18N
        jInternalFrame2.setVisible(false);
        jInternalFrame2.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Consulta de Chave");

        btnSalvar2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSalvar2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Salvar.png"))); // NOI18N
        btnSalvar2.setText("Salvar");
        btnSalvar2.addActionListener(formListener);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Chave.png"))); // NOI18N

        chamadoLabel.setText("Chamado:");

        userLabel.setText("User:");

        btnFechar2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnFechar2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/x-mark-5-16.png"))); // NOI18N
        btnFechar2.setText("Fechar");
        btnFechar2.addActionListener(formListener);

        txtChave2.setEditable(false);
        txtChave2.setBackground(new java.awt.Color(204, 204, 204));
        txtChave2.setEnabled(false);

        chamadoLabel1.setText("Chave:");
        chamadoLabel1.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(btnSalvar2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFechar2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(chamadoLabel)
                                .addGap(27, 27, 27)
                                .addComponent(chamadoField, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(chamadoLabel1)
                                .addGap(47, 47, 47)
                                .addComponent(txtChave2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(userLabel)
                                .addGap(55, 55, 55)
                                .addComponent(userField, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(22, 22, 22))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(userLabel))
                    .addComponent(userField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(chamadoLabel))
                    .addComponent(chamadoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(chamadoLabel1))
                    .addComponent(txtChave2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFechar2)
                    .addComponent(btnSalvar2))
                .addGap(22, 22, 22))
        );

        jInternalFrame2.getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 330, 230));

        javax.swing.GroupLayout ResumosLayout = new javax.swing.GroupLayout(Resumos);
        Resumos.setLayout(ResumosLayout);
        ResumosLayout.setHorizontalGroup(
            ResumosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 666, Short.MAX_VALUE)
            .addGroup(ResumosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(PanelCor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(ResumosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ResumosLayout.createSequentialGroup()
                    .addGap(179, 179, 179)
                    .addComponent(jInternalFrame2, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(154, Short.MAX_VALUE)))
        );
        ResumosLayout.setVerticalGroup(
            ResumosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 443, Short.MAX_VALUE)
            .addGroup(ResumosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ResumosLayout.createSequentialGroup()
                    .addComponent(PanelCor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(ResumosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ResumosLayout.createSequentialGroup()
                    .addGap(79, 79, 79)
                    .addComponent(jInternalFrame2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(364, Short.MAX_VALUE)))
        );
        Resumos.setLayer(PanelCor, javax.swing.JLayeredPane.DEFAULT_LAYER);
        Resumos.setLayer(jInternalFrame2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Resumos)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Resumos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        bindingGroup.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.KeyListener, java.awt.event.MouseListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == fornecedorField) {
                ResumosAdmin.this.fornecedorFieldActionPerformed(evt);
            }
            else if (evt.getSource() == btnChave) {
                ResumosAdmin.this.btnChaveActionPerformed(evt);
            }
            else if (evt.getSource() == RelatorioIndividual) {
                ResumosAdmin.this.RelatorioIndividualActionPerformed(evt);
            }
            else if (evt.getSource() == jBInclusao) {
                ResumosAdmin.this.jBInclusaoActionPerformed(evt);
            }
            else if (evt.getSource() == deleteButton1) {
                ResumosAdmin.this.deleteButton1ActionPerformed(evt);
            }
            else if (evt.getSource() == newButton1) {
                ResumosAdmin.this.newButton1ActionPerformed(evt);
            }
            else if (evt.getSource() == saveButton1) {
                ResumosAdmin.this.saveButton1ActionPerformed(evt);
            }
            else if (evt.getSource() == btnSalvar2) {
                ResumosAdmin.this.btnSalvar2ActionPerformed(evt);
            }
            else if (evt.getSource() == btnFechar2) {
                ResumosAdmin.this.btnFechar2ActionPerformed(evt);
            }
            else if (evt.getSource() == saveButton) {
                ResumosAdmin.this.saveButtonActionPerformed(evt);
            }
            else if (evt.getSource() == refreshButton) {
                ResumosAdmin.this.refreshButtonActionPerformed(evt);
            }
            else if (evt.getSource() == newButton) {
                ResumosAdmin.this.newButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deleteButton) {
                ResumosAdmin.this.deleteButtonActionPerformed(evt);
            }
        }

        public void keyPressed(java.awt.event.KeyEvent evt) {
        }

        public void keyReleased(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == txtPesquisar) {
                ResumosAdmin.this.txtPesquisarKeyReleased(evt);
            }
        }

        public void keyTyped(java.awt.event.KeyEvent evt) {
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == masterTable) {
                ResumosAdmin.this.masterTableMouseClicked(evt);
            }
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("unchecked")
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        entityManager.getTransaction().rollback();
        entityManager.getTransaction().begin();
        java.util.Collection data = query.getResultList();
        for (Object entity : data) {
            entityManager.refresh(entity);
        }
        list.clear();
        list.addAll(data);
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        String message = " Deseja realmente deletar este cadastro? ";
        String title = "Mensagem de confirmação:";
        int reply = JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {

        }
        int[] selected = masterTable.getSelectedRows();
        List<gerenciadordelicencas.Licenças_1> toRemove = new ArrayList<gerenciadordelicencas.Licenças_1>(selected.length);
        for (int idx = 0; idx < selected.length; idx++) {
            gerenciadordelicencas.Licenças_1 l = list.get(masterTable.convertRowIndexToModel(selected[idx]));
            toRemove.add(l);
            entityManager.remove(l);
        }
        list.removeAll(toRemove);
        Salvar();
        Atualizar();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        gerenciadordelicencas.Licenças_1 l = new gerenciadordelicencas.Licenças_1();
        entityManager.persist(l);
        list.add(l);
        int row = list.size() - 1;
        masterTable.setRowSelectionInterval(row, row);
        masterTable.scrollRectToVisible(masterTable.getCellRect(row, 0, true));
    }//GEN-LAST:event_newButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        Salvar();
        Atualizar();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void txtPesquisarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarKeyReleased
        PesquisarCadastros();        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesquisarKeyReleased

    private void btnChaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChaveActionPerformed

        if (masterTable.getSelectedRow() < 0) {

            JOptionPane.showMessageDialog(null, "Selecione uma linha da tabela!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        } else if (Integer.parseInt(disponivelField.getText().toString()) <= 0) {
            JOptionPane.showMessageDialog(null, "Chave indisponível! Fale com seu gestor.", "Aviso", JOptionPane.INFORMATION_MESSAGE);

        } else {
            String message = " Deseja realmente utilizar essa chave? ";
            String title = "Mensagem de confirmação:";
            int reply = JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {

                Resumos.setVisible(true);
                jInternalFrame2.setVisible(true);

                if (reply == JOptionPane.NO_OPTION) {
                    Resumos.setVisible(true);
                    jInternalFrame2.setVisible(false);

                }
            }
        }
    }//GEN-LAST:event_btnChaveActionPerformed

    private void RelatorioIndividualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RelatorioIndividualActionPerformed
        if (masterTable.getSelectedRow() < 0) {

            JOptionPane.showMessageDialog(null, "Selecione uma linha da tabela!", "Aviso", JOptionPane.INFORMATION_MESSAGE);

        } else {
            GeraPDF(idField.getText(), fornecedorField.getText(), produtoField.getText(), sistemaField.getText(), linguagemField.getText(), contratadoField.getText(), utilizandoField.getText(), disponivelField.getText());
    }//GEN-LAST:event_RelatorioIndividualActionPerformed
    }
    private void masterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_masterTableMouseClicked
        mostraItens();        // TODO add your handling code here:
    }//GEN-LAST:event_masterTableMouseClicked

    private void jBInclusaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBInclusaoActionPerformed

        if (masterTable.getSelectedRow() < 0) {

            JOptionPane.showMessageDialog(null, "Selecione uma linha da tabela!", "Aviso", JOptionPane.INFORMATION_MESSAGE);

        } else {
            String message = " Deseja realmente incluir essa licença? ";
            String title = "Mensagem de confirmação:";
            int reply = JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {

                Countreturn();
                Atualizar();
                Salvar();

                if (reply == JOptionPane.NO_OPTION) {

                }
            }
        }

    }//GEN-LAST:event_jBInclusaoActionPerformed

    private void fornecedorFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fornecedorFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fornecedorFieldActionPerformed

    private void deleteButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButton1ActionPerformed
        String message = " Deseja realmente deletar este cadastro? ";
        String title = "Mensagem de confirmação:";
        int reply = JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {

            int[] selected = masterTable.getSelectedRows();
            List<gerenciadordelicencas.Licenças_1> toRemove = new ArrayList<gerenciadordelicencas.Licenças_1>(selected.length);
            for (int idx = 0; idx < selected.length; idx++) {
                gerenciadordelicencas.Licenças_1 l = list.get(masterTable.convertRowIndexToModel(selected[idx]));
                toRemove.add(l);
                entityManager.remove(l);
            }
            list.removeAll(toRemove);
            Salvar();
            Atualizar();
        }
    }//GEN-LAST:event_deleteButton1ActionPerformed

    private void newButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButton1ActionPerformed
        gerenciadordelicencas.Licenças_1 l = new gerenciadordelicencas.Licenças_1();
        entityManager.persist(l);
        list.add(l);
        Salvar();
        int row = list.size() - 1;
        masterTable.setRowSelectionInterval(row, row);
        masterTable.scrollRectToVisible(masterTable.getCellRect(row, 0, true));
        Salvar();
    }//GEN-LAST:event_newButton1ActionPerformed

    private void saveButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButton1ActionPerformed
        Count();
        Salvar();
        Atualizar();
    }//GEN-LAST:event_saveButton1ActionPerformed

    private void btnSalvar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvar2ActionPerformed
        if (userField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Você não pode fazer isso!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        } else if (chamadoField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Você não pode fazer isso!", "Aviso", JOptionPane.INFORMATION_MESSAGE);

        } else {

            try {
                InsereHorario();
                pegaInformacoesDosCampos();
                ld.inserirHistórico(lb);
                txtChave2.setEditable(true);
                txtChave2.setEnabled(true);
                buscaChave();
                Utilizando();
                Count();
                Atualizar();
                Salvar();
                LimparCampos();

            } catch (Exception ex) {
                txtChave2.setEditable(true);
                txtChave2.setEnabled(true);
                buscaChave();
                Utilizando();
                Count();
                Atualizar();
                Salvar();
                LimparCampos();
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnSalvar2ActionPerformed

    private void btnFechar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFechar2ActionPerformed
        Resumos.setVisible(true);
        jInternalFrame2.setVisible(false);
        txtChave2.setText("");
    }//GEN-LAST:event_btnFechar2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelCor;
    private javax.swing.JButton RelatorioIndividual;
    private javax.swing.JDesktopPane Resumos;
    private javax.swing.JButton btnChave;
    private javax.swing.JButton btnFechar2;
    private javax.swing.JButton btnSalvar2;
    private javax.swing.JTextField chamadoField;
    private javax.swing.JLabel chamadoLabel;
    private javax.swing.JLabel chamadoLabel1;
    private javax.swing.JComboBox cmbPesquisar;
    private javax.swing.JTextField contratadoField;
    private javax.swing.JLabel contratadoLabel;
    private javax.swing.JTextField dataField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton deleteButton1;
    private javax.swing.JTextField disponivelField;
    private javax.swing.JLabel disponivelLabel;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JTextField fornecedorField;
    private javax.swing.JLabel fornecedorLabel;
    private javax.swing.JTextField horarioField;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel idLabel;
    private javax.swing.JButton jBInclusao;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblPesquisar;
    private javax.swing.JTextField linguagemField;
    private javax.swing.JLabel linguagemLabel;
    private java.util.List<gerenciadordelicencas.Licenças_1> list;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private javax.swing.JButton newButton;
    private javax.swing.JButton newButton1;
    private javax.swing.JTextField produtoField;
    private javax.swing.JLabel produtoLabel;
    private javax.persistence.Query query;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton saveButton1;
    private javax.swing.JTextField sistemaField;
    private javax.swing.JLabel sistemaLabel;
    private javax.swing.JTextField txtChave2;
    private javax.swing.JTextField txtPesquisar;
    private javax.swing.JTextField userField;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTextField utilizandoField;
    private javax.swing.JLabel utilizandoLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public void run() {
        JFrame frame = new JFrame();
        frame.setContentPane(new ResumosAdmin());
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.pack();
        frame.setResizable(false); //desabilita maximizar
        frame.setTitle("Resumos");//titulo
        frame.setLocationRelativeTo(null);  //centraliza Jframe
        frame.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("iconframe.png"))); //icone
        frame.setVisible(true);
    }

    private void Salvar() {
        try {
            entityManager.getTransaction().commit();
            entityManager.getTransaction().begin();
            editarCadastros();
        } catch (RollbackException rex) {
            rex.printStackTrace();
            entityManager.getTransaction().begin();
            List<gerenciadordelicencas.Licenças_1> merged = new ArrayList<gerenciadordelicencas.Licenças_1>(list.size());
            for (gerenciadordelicencas.Licenças_1 l : list) {
                merged.add(entityManager.merge(l));
            }
            list.clear();
            list.addAll(merged);
        }
    }

    private void Atualizar() {
        entityManager.getTransaction().rollback();
        entityManager.getTransaction().begin();
        java.util.Collection data = query.getResultList();
        for (Object entity : data) {
            entityManager.refresh(entity);
        }
        list.clear();
        list.addAll(data);
    }

    public void mostraItens() {
        int seleciona = masterTable.getSelectedRow();
        idField.setText(masterTable.getModel().getValueAt(seleciona, 0).toString());
        fornecedorField.setText(masterTable.getModel().getValueAt(seleciona, 1).toString());
        produtoField.setText(masterTable.getModel().getValueAt(seleciona, 2).toString());
        sistemaField.setText(masterTable.getModel().getValueAt(seleciona, 3).toString());
        linguagemField.setText(masterTable.getModel().getValueAt(seleciona, 4).toString());
        contratadoField.setText(masterTable.getModel().getValueAt(seleciona, 5).toString());
        utilizandoField.setText(masterTable.getModel().getValueAt(seleciona, 6).toString());
        disponivelField.setText(masterTable.getModel().getValueAt(seleciona, 7).toString());
    }

    public void listarCadastros() {
        String sql = "Select ID, Fornecedor, Produto, Sistema, Linguagem, Contratado, Utilizando, Disponivel from Licenças order by ID Asc ";
        try (Connection con = conexao.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            masterTable.setModel(DbUtils.resultSetToTableModel(rs));
            txtPesquisar.setText("");
        } catch (SQLException error) {
            JOptionPane.showMessageDialog(null, error);

        }
    }

    private void PesquisarCadastros() {
        if (cmbPesquisar.getSelectedIndex() == 0) {
            String sql = "Select ID, Fornecedor, Produto, Sistema, Linguagem, Contratado, Utilizando, Disponivel from Licenças where Fornecedor like ?";

            try (Connection con = conexao.getConnection()) {
                PreparedStatement pst = con.prepareStatement(sql);

                pst = con.prepareStatement(sql);
                pst.setString(1, txtPesquisar.getText() + "%");
                rs = pst.executeQuery();
                masterTable.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (SQLException error) {

            }
        }
        if (cmbPesquisar.getSelectedIndex() == 1) {
            String sql = "Select ID, Fornecedor, Produto, Sistema, Linguagem, Contratado, Utilizando, Disponivel from Licenças where Produto like ?";

            try (Connection con = conexao.getConnection()) {
                PreparedStatement pst = con.prepareStatement(sql);

                pst = con.prepareStatement(sql);
                pst.setString(1, txtPesquisar.getText() + "%");
                rs = pst.executeQuery();
                masterTable.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (SQLException error) {

            }

        }
    }

    private void buscaChave() {
        int seleciona = masterTable.getSelectedRow();
        String sql = "Select Chave from Licenças where ID like ?";

        try (Connection con = conexao.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);

            idField.setText(masterTable.getModel().getValueAt(seleciona, 0).toString());
            pst.setString(1, idField.getText());
            rs = pst.executeQuery();
            rs.first();

            txtChave2.setText(rs.getString("Chave"));
        } catch (SQLException error) {

        }

    }

    private void Count() {
        try {
            masterTable.getSelectedRow();
            int contratado = Integer.parseInt(contratadoField.getText().toString());
            int utilizando = Integer.parseInt(utilizandoField.getText().toString());
            int disponivel = (contratado - utilizando);
            disponivelField.setText(disponivel + "");
            Salvar();
            Atualizar();

        } catch (NumberFormatException ex) {
            disponivelField.setText("0");
        }

    }

    private void Utilizando() {
        masterTable.getSelectedRow();
        int utilizando = Integer.parseInt(utilizandoField.getText().toString());
        int soma = 1;
        int resultado = (utilizando + soma);
        utilizandoField.setText(resultado + "");
        Count();
        Salvar();
        Atualizar();

    }

    private int GeraPDF(String ID, String Fornecedor, String Produto, String Sistema, String Linguagem, String Contratado,
            String Utilizando, String Disponivel) {

        try {
            cont++;
            Document doc = new Document(PageSize.A4);
            JFileChooser fileChooser = new JFileChooser();
            int saveValue = fileChooser.showSaveDialog(null);
            if (saveValue == JFileChooser.APPROVE_OPTION) {
                OutputStream os = new FileOutputStream(fileChooser.getSelectedFile().getAbsolutePath() + ".pdf");
                PdfWriter.getInstance(doc, os);

                doc.open();
                //Image logo = Image.getInstance("Netshoes.jpg");
                //logo.setAlignment(Image.ALIGN_LEFT);
                //doc.add(logo);
                Font f = new Font(Font.FontFamily.TIMES_ROMAN, 20, Font.BOLD);
                Paragraph p = new Paragraph("Relatório de Licenças", f);
                p.setAlignment(Paragraph.ALIGN_CENTER);
                doc.add(p);
                Paragraph ParagrafoID = new Paragraph("ID: " + ID);
                doc.add(ParagrafoID);
                Paragraph ParagrafoFornecedor = new Paragraph("Fornecedor: " + Fornecedor);
                doc.add(ParagrafoFornecedor);
                Paragraph ParagrafoProduto = new Paragraph("Produto: " + Produto);
                doc.add(ParagrafoProduto);
                Paragraph ParagrafoSistema = new Paragraph("Sistema: " + Sistema);
                doc.add(ParagrafoSistema);
                Paragraph ParagrafoLinguagem = new Paragraph("Linguagem: " + Linguagem);
                doc.add(ParagrafoLinguagem);
                Paragraph ParagrafoContratado = new Paragraph("Contratado: " + Contratado);
                doc.add(ParagrafoContratado);
                Paragraph ParagrafoUtilizando = new Paragraph("Utilizando: " + Utilizando);
                doc.add(ParagrafoUtilizando);
                Paragraph ParagrafoDisponivel = new Paragraph("Disponivel: " + Disponivel);
                doc.add(ParagrafoDisponivel);
                doc.close();
                JOptionPane.showMessageDialog(null, "Relatório gerado com sucesso!", "Relatório Concluido", JOptionPane.INFORMATION_MESSAGE);
                System.out.println("ok");

                if (saveValue == JFileChooser.CANCEL_OPTION) {

                }

            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ResumosAdmin.class.getName()).log(Level.SEVERE, null, ex);

        } catch (DocumentException ex) {
            Logger.getLogger(ResumosAdmin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ResumosAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        return cont;

    }

    private void editarCadastros() {
        String sql = "Update Licenças set Fornecedor  = ?, Produto = ? , Sistema = ?, Linguagem = ?, Contratado = ? , Utilizando = ? , Disponivel = ? where ID = ?";

        try (Connection con = BancoDeDados.conexao.getConnection()) {
            PreparedStatement pst = con.prepareStatement(sql);

            pst.setString(1, fornecedorField.getText());
            pst.setString(2, produtoField.getText());
            pst.setString(3, sistemaField.getText());
            pst.setString(4, linguagemField.getText());
            pst.setString(5, contratadoField.getText());
            pst.setString(6, utilizandoField.getText());
            pst.setString(7, disponivelField.getText());
            pst.setString(8, idField.getText());
            pst.executeUpdate();
            listarCadastros();
            //JOptionPane.showMessageDialog(null, "Cadastro atualizado com sucesso.");

        } catch (SQLException error) {
            JOptionPane.showMessageDialog(null, error);

        }
    }

    private void Countreturn() {
        masterTable.getSelectedRow();
        int utilizando = Integer.parseInt(utilizandoField.getText());
        int disponivel = Integer.parseInt(disponivelField.getText());
        int menos = 1;
        int mais = 1;
        int resultado = (utilizando - menos);
        int resultado2 = (disponivel + mais);
        utilizandoField.setText(resultado + "");
        disponivelField.setText(resultado2 + "");
        Salvar();
        Atualizar();
    }
}
